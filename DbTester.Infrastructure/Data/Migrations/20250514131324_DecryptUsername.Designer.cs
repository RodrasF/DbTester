// <auto-generated />
using System;
using DbTester.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DbTester.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250514131324_DecryptUsername")]
    partial class DecryptUsername
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DbTester.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers", (string)null);
                });

            modelBuilder.Entity("DbTester.Domain.Entities.DatabaseConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ConnectionTimeout")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsConnectionValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastConnectionTest")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxPoolSize")
                        .HasColumnType("integer");

                    b.Property<int>("MinPoolSize")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("DatabaseConnections", (string)null);
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TemplateParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TestWorkflowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestWorkflowId");

                    b.ToTable("TemplateParameters", (string)null);
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("ExpectSuccess")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SqlStatement")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("TestUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestWorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SequenceOrder");

                    b.HasIndex("TestUserId");

                    b.HasIndex("TestWorkflowId");

                    b.ToTable("TestOperations", (string)null);
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TestWorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("StartTime");

                    b.HasIndex("TestWorkflowId");

                    b.ToTable("TestRuns", (string)null);
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedRole")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("TestUsers", (string)null);
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestWorkflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DatabaseConnectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseConnectionId");

                    b.HasIndex("IsTemplate");

                    b.HasIndex("Name");

                    b.ToTable("TestWorkflows", (string)null);
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TemplateParameter", b =>
                {
                    b.HasOne("DbTester.Domain.Entities.TestWorkflow", "TestWorkflow")
                        .WithMany("Parameters")
                        .HasForeignKey("TestWorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestWorkflow");
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestOperation", b =>
                {
                    b.HasOne("DbTester.Domain.Entities.TestUser", "TestUser")
                        .WithMany()
                        .HasForeignKey("TestUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbTester.Domain.Entities.TestWorkflow", "TestWorkflow")
                        .WithMany("Operations")
                        .HasForeignKey("TestWorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestUser");

                    b.Navigation("TestWorkflow");
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestRun", b =>
                {
                    b.HasOne("DbTester.Domain.Entities.TestWorkflow", "TestWorkflow")
                        .WithMany("TestRuns")
                        .HasForeignKey("TestWorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DbTester.Domain.Entities.OperationResult", "OperationResults", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ErrorMessage")
                                .HasColumnType("text");

                            b1.Property<bool>("IsSuccessful")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MatchesExpectedOutcome")
                                .HasColumnType("boolean");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Notes")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int?>("ResultCount")
                                .HasColumnType("integer");

                            b1.Property<string>("ResultData")
                                .HasColumnType("text");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("TestOperationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("TestRunId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("TestOperationId");

                            b1.HasIndex("TestRunId");

                            b1.ToTable("OperationResults", (string)null);

                            b1.HasOne("DbTester.Domain.Entities.TestOperation", "TestOperation")
                                .WithMany()
                                .HasForeignKey("TestOperationId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner("TestRun")
                                .HasForeignKey("TestRunId");

                            b1.Navigation("TestOperation");

                            b1.Navigation("TestRun");
                        });

                    b.Navigation("OperationResults");

                    b.Navigation("TestWorkflow");
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestUser", b =>
                {
                    b.OwnsMany("DbTester.Domain.Entities.UserPermission", "ExpectedPermissions", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("IsGranted")
                                .HasColumnType("boolean");

                            b1.Property<string>("ObjectName")
                                .HasColumnType("text");

                            b1.Property<int>("Permission")
                                .HasColumnType("integer");

                            b1.Property<Guid>("TestUserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("TestUserId");

                            b1.ToTable("UserPermissions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TestUserId");
                        });

                    b.Navigation("ExpectedPermissions");
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestWorkflow", b =>
                {
                    b.HasOne("DbTester.Domain.Entities.DatabaseConnection", "DatabaseConnection")
                        .WithMany()
                        .HasForeignKey("DatabaseConnectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DatabaseConnection");
                });

            modelBuilder.Entity("DbTester.Domain.Entities.TestWorkflow", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Parameters");

                    b.Navigation("TestRuns");
                });
#pragma warning restore 612, 618
        }
    }
}
